name: Build & Deploy Complete Docs Site

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Build full docs site with TOC and search
        run: |
          mkdir -p docs_site
          pages_file=$(mktemp)
          find docs -name "*.md" | while read mdfile; do
            relative_path="${mdfile#docs/}"
            output_file="docs_site/${relative_path%.md}.html"
            mkdir -p "$(dirname "$output_file")"
            pandoc "$mdfile" -s --toc -o "$output_file"
            echo "$output_file" >> "$pages_file"
          done

          # Generate sidebar links
          sidebar_links=""
          while read page; do
            file_name=$(basename "$page" .html)
            sidebar_links="$sidebar_links<li><a href=\"$file_name.html\">$file_name</a></li>"
          done < "$pages_file"

          # Generate search JSON
          echo "[" > docs_site/search_index.json
          first=true
          while read page; do
            title=$(basename "$page" .html)
            content=$(sed ':a;N;$!ba;s/\n/ /g' "$page" | sed 's/"/\\"/g' | sed 's/<[^>]*>//g')
            if [ "$first" = true ]; then
              first=false
            else
              echo "," >> docs_site/search_index.json
            fi
            echo "{\"title\":\"$title\",\"url\":\"$(basename "$page")\",\"content\":\"$content\"}" >> docs_site/search_index.json
          done < "$pages_file"
          echo "]" >> docs_site/search_index.json

          # Generate index.html
          cat > docs_site/index.html <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>MoodMapper Documentation</title>
<style>
body { font-family: Arial, sans-serif; margin: 0; display: flex; }
.sidebar { width: 250px; background: #f4f4f4; padding: 20px; overflow-y: auto; height: 100vh; }
.content { flex: 1; padding: 2rem; max-width: 900px; }
h1, h2, h3 { color: #2c3e50; }
ul { list-style: none; padding: 0; }
li { margin: 0.5rem 0; }
a { text-decoration: none; color: #3498db; }
a:hover { text-decoration: underline; }
.checklist li::before { content: "✅ "; color: green; }
input[type="text"] { width: 100%; padding: 0.5rem; margin-bottom: 1rem; }
.search-result { margin-bottom: 0.5rem; }
</style>
</head>
<body>
<div class="sidebar">
  <h2>Docs Navigation</h2>
  <ul>
EOF

          echo "$sidebar_links" >> docs_site/index.html

cat >> docs_site/index.html <<'EOF'
  </ul>
</div>
<div class="content">
  <h1>MoodMapper Documentation</h1>

  <div class="section">
    <h2>Search Docs</h2>
    <input type="text" id="searchBox" placeholder="Type to search..." oninput="searchDocs()">
    <div id="searchResults"></div>
  </div>

  <div class="section">
    <h2>App Overview</h2>
    <p>MoodMapper is a next-generation mood tracking and recommendation application. It captures user mood inputs, analyzes patterns, and delivers personalized insights, scripture references, and playlist recommendations via AI-driven microservices.</p>
  </div>

  <div class="section">
    <h2>App Features</h2>
    <ul>
      <li>Mood Input & Analysis</li>
      <li>Personalized Recommendations (Music, Scriptures, AI Insights)</li>
      <li>Microservices Architecture with Azure Functions</li>
      <li>API Layer Management via Azure API Management</li>
      <li>Dynamic Documentation Deployment via GitHub Pages</li>
      <li>Scalable and Extensible MVP</li>
    </ul>
  </div>

  <div class="section">
    <h2>MVP Delivery Checklist</h2>
    <ul class="checklist">
      <li>Consumer Mobile App MVP</li>
      <li>Mood Ingest Microservice (mm-func-mood-ingest)</li>
      <li>Recommendations Microservice (mm-func-recommendations-dal)</li>
      <li>Azure CosmosDB Integration</li>
      <li>API Layer (APIM) for Mobile App Consumption</li>
      <li>Automated Docs Deployment via GitHub Pages</li>
    </ul>
  </div>

  <div class="section">
    <h2>Documentation Index</h2>
    <ul>
EOF

          echo "$sidebar_links" >> docs_site/index.html

cat >> docs_site/index.html <<'EOF'
    </ul>
  </div>
</div>

<script>
let docs = [];
fetch('search_index.json')
  .then(response => response.json())
  .then(data => { docs = data; });

function searchDocs() {
  const query = document.getElementById('searchBox').value.toLowerCase();
  const resultsDiv = document.getElementById('searchResults');
  resultsDiv.innerHTML = '';
  if (!query) return;
  const results = docs.filter(d => d.title.toLowerCase().includes(query) || d.content.toLowerCase().includes(query));
  results.forEach(r => {
    const div = document.createElement('div');
    div.className = 'search-result';
    div.innerHTML = '<a href="' + r.url + '">' + r.title + '</a>';
    resultsDiv.appendChild(div);
  });
}
</script>
</body>
</html>
EOF

      - name: Commit docs updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs_site/*
          git diff --cached --quiet || git commit -m "Update docs HTML, sidebar, TOC, and search index"
          git push origin main

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs_site  </div>

  <div class="section">
    <h2>MVP Delivery Checklist</h2>
    <ul class="checklist">
      <li>Consumer Mobile App MVP</li>
      <li>Mood Ingest Microservice (mm-func-mood-ingest)</li>
      <li>Recommendations Microservice (mm-func-recommendations-dal)</li>
      <li>Azure CosmosDB Integration</li>
      <li>API Layer (APIM) for Mobile App Consumption</li>
      <li>Automated Docs Deployment via GitHub Pages</li>
    </ul>
  </div>

  <div class="section">
    <h2>Documentation Index</h2>
    <ul>
      $sidebar_links
    </ul>
  </div>

</div>

<script>
// Search functionality
let docs = [];
fetch('search_index.json')
  .then(response => response.json())
  .then(data => { docs = data; });

function searchDocs() {
  const query = document.getElementById('searchBox').value.toLowerCase();
  const resultsDiv = document.getElementById('searchResults');
  resultsDiv.innerHTML = '';
  if (!query) return;

  const results = docs.filter(d => d.title.toLowerCase().includes(query) || d.content.toLowerCase().includes(query));
  results.forEach(r => {
    const div = document.createElement('div');
    div.className = 'search-result';
    div.innerHTML = '<a href="' + r.url + '">' + r.title + '</a>';
    resultsDiv.appendChild(div);
  });
}
</script>

</body>
</html>
EOF

      # 4️⃣ Commit all docs updates to main
      - name: Commit docs updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs_site/*
          git diff --cached --quiet || git commit -m "Update docs HTML, sidebar, TOC, and search index"
          git push origin main

      # 5️⃣ Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs_site
